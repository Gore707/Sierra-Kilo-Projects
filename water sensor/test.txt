#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)

#define MOISTURE_ANALOG_PIN A0 // Pin connected to the analog output of the soil moisture sensor
#define MOISTURE_DIGITAL_PIN A1 // Pin connected to the digital output of the soil moisture sensor

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long previousDisplayTime = 0; // Variable to track previous display time
const unsigned long displayInterval = 1000; // Interval between display updates in milliseconds

// Define the number of hours to display moisture level history
const int numHours = 6;

// Array to store moisture levels for each hour
int moistureHistory[numHours];

void setup() {
  Serial.begin(9600);
  Serial.println("Starting setup...");

  pinMode(MOISTURE_DIGITAL_PIN, INPUT); // Set digital pin as input
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3D)) { // Use 0x3D for A4/A5
    Serial.println(F("SSD1306 allocation failed"));
    while (true); // Stay in an infinite loop if display initialization fails
  }
  Serial.println("Display initialized successfully.");

  // Initialize moisture history array with default values
  for (int i = 0; i < numHours; i++) {
    moistureHistory[i] = 0;
  }

  // Display boot message
  display.display();
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10,10);
  display.println("Plant Water Sensor");
  display.setCursor(40,30);
  display.println("V0.1");
  display.setCursor(20,50);
  display.println("Sierra Kilo Labs");
  display.display();
  delay(3000); // Pause for 3 seconds
  display.clearDisplay();

  Serial.println("Setup completed.");
}

void loop() {
  Serial.println("Looping...");

  // Read the moisture level from the analog pin of the sensor
  int moistureLevel = analogRead(MOISTURE_ANALOG_PIN);
  
  // Read the digital output of the sensor
  int digitalMoisture = digitalRead(MOISTURE_DIGITAL_PIN);

  // Convert the analog reading to percentage
  int percentage = map(moistureLevel, 0, 1023, 0, 100);

  // Update moisture history array
  updateMoistureHistory(percentage);

  // Display moisture level, plant status, and moisture history at regular intervals
  unsigned long currentMillis = millis();
  if (currentMillis - previousDisplayTime >= displayInterval) {
    previousDisplayTime = currentMillis;
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0,0);
    display.println("Soil Water %");
    display.println(percentage);

    // Display plant status
    display.setCursor(0,20);
    display.print("Plant Status: ");
    if (percentage >= 90) {
      display.println("Full");
    } else if (percentage >= 60 && percentage <= 89) {
      display.println("Happy");
    } else {
      display.println("Hungry");
    }

    // Display moisture history
    display.setCursor(0,40);
    display.println("Moisture History:");
    for (int i = 0; i < numHours; i++) {
      display.setCursor(i * 20, 50);
      display.println(moistureHistory[i]);
    }

    display.display(); // Display content on OLED
  }

  // Add other functionalities or sensor readings here

  Serial.println("Loop completed.");
  delay(1000); // Add a delay to avoid flooding the serial monitor
}

// Function to update moisture history array
void updateMoistureHistory(int currentMoisture) {
  // Shift values in the array to the left
  for (int i = numHours - 1; i > 0; i--) {
    moistureHistory[i] = moistureHistory[i - 1];
  }
  // Update the first element with the current moisture level
  moistureHistory[0] = currentMoisture;
}
