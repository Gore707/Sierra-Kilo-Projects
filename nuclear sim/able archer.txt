#include <SPI.h>
#include <MFRC522.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <Keypad.h>

#define SS_PIN 10
#define RST_PIN 9

#define TFT_CS     10
#define TFT_RST    9
#define TFT_DC     8

#define ROWS 4
#define COLS 4

char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {5, 4, 3, 2};
byte colPins[COLS] = {9, 8, 7, 6};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
MFRC522 rfid(SS_PIN, RST_PIN);

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

struct Target {
  String country;
  String city;
};

Target selectedTarget;
char selectedWeapon = '\0';
bool monitorsEnabled = false;

void enableMonitors() {
  tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST7735_BLACK);
  tft.setTextSize(1);
  tft.setTextColor(ST7735_WHITE);
  tft.setCursor(0, 0);
  tft.println("Monitors enabled");
  monitorsEnabled = true;
}

void displayWeaponOptions() {
  tft.fillScreen(ST7735_BLACK);
  tft.setCursor(0, 0);
  tft.println("Select weapon:");
  tft.println("A. Davy Crockett");
  tft.println("B. Fat Man");
  tft.println("C. Ivy King");
  tft.println("D. Castle Bravo");
}

char getSelectedWeapon() {
  char key = keypad.getKey();
  if (key == 'A' || key == 'B' || key == 'C' || key == 'D') {
    selectedWeapon = key;
    return selectedWeapon;
  }
  return '\0';
}

void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();
}

void loop() {
  if (!monitorsEnabled) {
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      enableMonitors();
    }
  } else {
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      // Once monitors are enabled, further RFID card scans are ignored
      return;
    }
    
    char selectedKey = keypad.getKey();
    if (selectedKey) {
      if (selectedWeapon == '\0') {
        displayWeaponOptions();
        while (selectedWeapon == '\0') {
          selectedKey = getSelectedWeapon();
        }
      }
      // Once weapon is selected, display Payload Outbound
      tft.fillScreen(ST7735_BLACK);
      tft.setCursor(0, 0);
      tft.println("Payload Outbound");
      delay(2000); // Assuming a delay for demonstration
      // Display the dotted line animation
      // Display Payload Detonated once animation completes
      tft.fillScreen(ST7735_BLACK);
      tft.setCursor(0, 0);
      tft.println("Payload Detonated");
      // Display kill count based on selected weapon
      int killCount = 0;
      switch (selectedWeapon) {
        case 'A':
          // Assuming estimated casualties for the Davy Crockett
          killCount = 100; // Adjust as needed based on research
          break;
        case 'B':
          // Assuming estimated casualties for the Fat Man
          killCount = 70000; // Adjust as needed based on research
          break;
        case 'C':
          // Assuming estimated casualties for the Ivy King
          killCount = 50000; // Adjust as needed based on research
          break;
        case 'D':
          // Assuming estimated casualties for the Castle Bravo
          killCount = 150000; // Adjust as needed based on research
          break;
      }
      tft.println("Kill Count: ");
      tft.println(killCount);
      selectedWeapon = '\0'; // Reset selected weapon for next use
      // Wait for user input to restart the process
      delay(5000); // Assuming a delay for demonstration
    }
  }
}
