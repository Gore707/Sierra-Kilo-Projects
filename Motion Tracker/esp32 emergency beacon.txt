#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <SSD1306Wire.h>

const char* ssid = "Weyland-Yutani Emergency Beacon";
const char* password = ""; // No password

ESP8266WebServer server(80);

SSD1306Wire display(0x3c, 4, 5); // Using GPIO 4 (SDA) and GPIO 5 (SCL) for I2C
const int BUZZER_PIN = 14; // Digital pin 14 for the buzzer

bool bootingFinished = false;
bool clientConnected = false;

void setup() {
  Serial.begin(115200);
  
  // Initialize OLED display
  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);
  
  // Display booting message for 4 seconds
  display.clear();
  display.drawString(0, 0, "Booting...");
  display.drawString(0, 16, "Weyland-Yutani");
  display.drawString(0, 32, "Emergency Beacon");
  display.display();
  delay(4000); // Display booting message for 4 seconds
  display.clear();
  display.display();
  
  // Initialize WiFi
  WiFi.softAP(ssid, password);
  server.on("/", handleRoot);
  server.begin();

  // Setup buzzer pin
  pinMode(BUZZER_PIN, OUTPUT);
}

void loop() {
  server.handleClient();

  // If no client is connected, display "Pinging Reinforcements"
  if (WiFi.softAPgetStationNum() == 0 && !clientConnected) {
    display.clear();
    display.drawString(0, 0, "Pinging Reinforcements");
    display.display();
  }
}

void handleRoot() {
  // Play double beep
  if (!bootingFinished) {
    playDoubleBeep();
    bootingFinished = true;
  }

  // Set client connected flag
  clientConnected = true;
  
  display.clear();
  display.drawString(0, 0, "Unit Pinged,");
  display.drawString(0, 16, "Rescue Inbound");
  display.display();
  delay(5000); // Display message for 5 seconds
  display.clear();
  display.display();

  server.send(200, "text/html", "<html><body><h1>Weyland-Yutani Emergency Beacon</h1><p>Weyland-Yutani Property Pinged. Rescue / Recover Personnel and Property</p></body></html>");
}

void playDoubleBeep() {
  tone(BUZZER_PIN, 1000, 100); // Play first beep
  delay(100); // Wait before playing the next beep
  tone(BUZZER_PIN, 1000, 100); // Play second beep
  delay(100); // Wait before returning
}

