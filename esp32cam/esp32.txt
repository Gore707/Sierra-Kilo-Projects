#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SD_MMC.h>
#include "time.h"
#include <Ticker.h>

const char* ssid = "Sierra Kilo Security Cam 1"; // Wi-Fi SSID
const char* password = "00000000"; // Wi-Fi password

AsyncWebServer server(80);
Ticker motionDetectionTimer;

bool isRecording = false;
bool motionDetected = false;
unsigned long motionStartTime = 0;

const int trigPin = 12; // Define GPIO pin for ultrasonic sensor TRIG
const int echoPin = 13; // Define GPIO pin for ultrasonic sensor ECHO

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize SD card
  if (!SD_MMC.begin("/sdcard", true)) {
    Serial.println("Card Mount Failed");
    return;
  }
  Serial.println("Card Mounted");

  // Set time zone and sync time
  configTime(0, 0, "pool.ntp.org"); // Set time zone and sync time via NTP
  Serial.println("Waiting for time sync...");
  while (!time(nullptr)) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Time synced");

  // Define routes
  server.on("/", HTTP_GET, handleRoot);
  server.on("/videos", HTTP_GET, handleVideos);
  server.on("/video", HTTP_GET, handleVideo);
  server.on("/download", HTTP_GET, handleDownload);
  server.on("/delete", HTTP_GET, handleDelete);
  server.on("/startRecording", HTTP_GET, handleStartRecording);
  server.on("/stopRecording", HTTP_GET, handleStopRecording);

  // Start server
  server.begin();
  Serial.println("HTTP server started");

  // Initialize motion detection timer
  motionDetectionTimer.attach(1, checkMotion); // Check motion detection every 1 millisecond

  // Initialize ultrasonic sensor
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {
  // Empty loop
}

void handleRoot(AsyncWebServerRequest *request) {
  String page = "<!DOCTYPE html><html><head><title>ESP32 Security Camera</title></head><body>";
  page += "<h1>ESP32 Security Camera</h1>";
  page += "<h2>Live Camera Feed</h2>";
  page += "<img src=\"/live\" style=\"width: 640px; height: 480px;\">";
  page += "<h2>Recorded Videos</h2>";
  page += "<a href=\"/videos\">View Recorded Videos</a>";
  page += "</body></html>";

  request->send(200, "text/html", page);
}

void handleVideos(AsyncWebServerRequest *request) {
  // Code to list and display videos from SD card
}

void handleVideo(AsyncWebServerRequest *request) {
  // Code to serve individual video files from SD card
}

void handleDownload(AsyncWebServerRequest *request) {
  // Code to handle downloading video files from SD card
}

void handleDelete(AsyncWebServerRequest *request) {
  // Code to handle deleting video files from SD card
}

void handleStartRecording(AsyncWebServerRequest *request) {
  if (!isRecording) {
    isRecording = true;
    motionDetected = true; // Initial motion detected
    motionStartTime = millis();
    startRecording();
  }
  request->send(200, "text/plain", "Recording started");
}

void handleStopRecording(AsyncWebServerRequest *request) {
  if (isRecording) {
    isRecording = false;
    stopRecording();
  }
  request->send(200, "text/plain", "Recording stopped");
}

void startRecording() {
  Serial.println("Recording started");
  // Your code to start recording
}

void stopRecording() {
  Serial.println("Recording stopped");
  // Your code to stop recording
}

void checkMotion() {
  // Trigger ultrasonic sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure echo duration
  long duration = pulseIn(echoPin, HIGH);

  // Convert duration to distance (in cm)
  float distance = duration * 0.034 / 2;

  // Check if motion is detected based on distance threshold
  if (distance < 100) { // Adjust threshold as needed
    motionDetected = true;
  }

  // Handle motion events
  if (motionDetected) {
    startRecording(); // Start recording when motion is detected
  }
}